name: CI / Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read

jobs:
  build:
    name: Install & Build
    runs-on: ubuntu-latest
    env:
      # Inject secrets into the job environment (these will be masked in logs)
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      COOKIE_NAME: ${{ secrets.COOKIE_NAME }}
      # optional Vercel token for deploy stage (only used if you enable deploy step)
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint (optional)
        run: npm run lint
        continue-on-error: true

      - name: Build (production)
        # MONGODB_URI is available via `env:` above
        run: npm run build
        # If your build may print sensitive info, you can remove echoing by redirecting.

      - name: Run tests (optional)
        run: npm test
        continue-on-error: true

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: .next

  # Optional: deploy to Vercel using Vercel CLI (requires VERCEL_TOKEN secret)
  deploy:
    if: github.ref == 'refs/heads/main' && secrets.VERCEL_TOKEN != ''
    needs: build
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      COOKIE_NAME: ${{ secrets.COOKIE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Deploy to Vercel (production)
        # Note: VERCEL_TOKEN must have enough scope. Optionally use --prod --confirm
        run: |
          # If you haven't linked the project to Vercel from CLI, you can provide project / org:
          # vercel --prod --token "$VERCEL_TOKEN"
          vercel --prod --token "$VERCEL_TOKEN"
